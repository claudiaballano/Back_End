{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["'use strict'\nconst DNI_REGEX = /^(\\d{8})([A-Z])$/\nconst CIF_REGEX = /^([ABCDEFGHJKLMNPQRSUVW])(\\d{7})([0-9A-J])$/\nconst NIE_REGEX = /^[XYZ]\\d{7,8}[A-Z]$/\n\nconst sanitize = function (str) {\n  // Ensure uppercase and remove whitespace ang hyphens\n  return str.toUpperCase().replace(/\\s/g, '').replace(/-/g, '')\n}\n\nexport const validateSpanishId = (str) => {\n  str = sanitize(str)\n  let valid = false\n  const type = spainIdType(str)\n\n  switch (type) {\n    case 'dni':\n      valid = validDNI(str)\n      break\n    case 'nie':\n      valid = validNIE(str)\n      break\n    case 'cif':\n      valid = validCIF(str)\n      break\n  }\n\n  return valid\n}\n\nexport const spainIdType = (str) => {\n  str = sanitize(str)\n  if (str.match(DNI_REGEX)) {\n    return 'dni'\n  }\n  if (str.match(CIF_REGEX)) {\n    return 'cif'\n  }\n  if (str.match(NIE_REGEX)) {\n    return 'nie'\n  }\n}\n\nexport const validDNI = (str) => {\n  str = sanitize(str)\n  const dniLetters = 'TRWAGMYFPDXBNJZSQVHLCKE'\n  const letter = dniLetters.charAt(parseInt(str, 10) % 23)\n\n  return letter === str.charAt(8)\n}\n\nexport const validNIE = (str) => {\n  str = sanitize(str)\n\n  // Change the initial letter for the corresponding number and validate as DNI\n  let niePrefix = str.charAt(0)\n\n  switch (niePrefix) {\n    case 'X':\n      niePrefix = 0\n      break\n    case 'Y':\n      niePrefix = 1\n      break\n    case 'Z':\n      niePrefix = 2\n      break\n    default:\n      return false\n  }\n\n  return validDNI(niePrefix + str.substr(1))\n}\n\nexport const validCIF = (str) => {\n  str = sanitize(str)\n  if (!str || str.length !== 9) {\n    return false\n  }\n\n  const letters = ['J', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I']\n  const digits = str.substr(1, str.length - 2)\n  const letter = str.substr(0, 1)\n  const control = str.substr(str.length - 1)\n  let sum = 0\n  let i\n  let digit\n\n  if (!letter.match(/[A-Z]/)) {\n    return false\n  }\n\n  for (i = 0; i < digits.length; ++i) {\n    digit = parseInt(digits[i])\n\n    if (isNaN(digit)) {\n      return false\n    }\n\n    if (i % 2 === 0) {\n      digit *= 2\n      if (digit > 9) {\n        digit = parseInt(digit / 10) + (digit % 10)\n      }\n\n      sum += digit\n    } else {\n      sum += digit\n    }\n  }\n\n  sum %= 10\n  if (sum !== 0) {\n    digit = 10 - sum\n  } else {\n    digit = sum\n  }\n\n  if (letter.match(/[ABEH]/)) {\n    return String(digit) === control\n  }\n  if (letter.match(/[NPQRSW]/)) {\n    return letters[digit] === control\n  }\n\n  return String(digit) === control || letters[digit] === control\n}\n"],"names":["const","DNI_REGEX","CIF_REGEX","NIE_REGEX","sanitize","str","toUpperCase","replace","validateSpanishId","valid","spainIdType","validDNI","validNIE","validCIF","match","charAt","parseInt","niePrefix","substr","length","i","digit","letters","digits","letter","control","sum","isNaN","String"],"mappings":"AACAA,IAAMC,EAAY,mBACZC,EAAY,8CACZC,EAAY,sBAEZC,EAAW,SAAUC,UAElBA,EAAIC,cAAcC,QAAQ,MAAO,IAAIA,QAAQ,KAAM,KAG/CC,WAAqBH,GAChCA,EAAMD,EAASC,OACXI,GAAQ,SACCC,EAAYL,QAGlB,MACHI,EAAQE,EAASN,aAEd,MACHI,EAAQG,EAASP,aAEd,MACHI,EAAQI,EAASR,UAIdI,GAGIC,WAAeL,UAC1BA,EAAMD,EAASC,IACPS,MAAMb,GACL,MAELI,EAAIS,MAAMZ,GACL,MAELG,EAAIS,MAAMX,GACL,cAIEQ,WAAYN,UACvBA,EAAMD,EAASC,GACI,0BACOU,OAAOC,SAASX,EAAK,IAAM,MAEnCA,EAAIU,OAAO,IAGlBH,WAAYP,OAInBY,GAHJZ,EAAMD,EAASC,IAGKU,OAAO,UAEnBE,OACD,IACHA,EAAY,YAET,IACHA,EAAY,YAET,IACHA,EAAY,uBAGL,SAGJN,EAASM,EAAYZ,EAAIa,OAAO,KAG5BL,WAAYR,QACvBA,EAAMD,EAASC,KACY,IAAfA,EAAIc,cACP,MAQLC,EACAC,EANEC,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxDC,EAASlB,EAAIa,OAAO,EAAGb,EAAIc,OAAS,GACpCK,EAASnB,EAAIa,OAAO,EAAG,GACvBO,EAAUpB,EAAIa,OAAOb,EAAIc,OAAS,GACpCO,EAAM,MAILF,EAAOV,MAAM,gBACT,MAGJM,EAAI,EAAGA,EAAIG,EAAOJ,SAAUC,EAAG,IAClCC,EAAQL,SAASO,EAAOH,IAEpBO,MAAMN,UACD,EAGLD,EAAI,GAAM,IACZC,GAAS,GACG,IACVA,EAAQL,SAASK,EAAQ,IAAOA,EAAQ,IAG1CK,GAAOL,GAEPK,GAAOL,SAMTA,EADU,IADZK,GAAO,IAEG,GAAKA,EAELA,EAGNF,EAAOV,MAAM,UACRc,OAAOP,KAAWI,EAEvBD,EAAOV,MAAM,YACRQ,EAAQD,KAAWI,EAGrBG,OAAOP,KAAWI,GAAWH,EAAQD,KAAWI"}